<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_object_network_header_reference"><title>Boost.Object.Network Header Reference</title><header name="boost/object/network/tcpclient.hpp">
<namespace name="boost">
<namespace name="object">
<namespace name="network">
<namespace name="tcp">
<class name="client"><inherit access="public">boost::object::network::tcp::socket</inherit><description><para>The tcp client class. </para></description><method-group name="protected member functions">
<method name="connect"><type>auto_slot void</type><parameter name="host"><paramtype>const std::string &amp;</paramtype><description><para>A hostname or IPv4/6 address to connect to </para></description></parameter><parameter name="port"><paramtype>uint16_t</paramtype><description><para>The port to connect to.</para></description></parameter><description><para>
This connects the socket to <computeroutput>host:<computeroutput>port</computeroutput>.</computeroutput> On success, the signal <computeroutput>connected</computeroutput> is emitted. On failure, <computeroutput>disconnected</computeroutput> is emitted. </para></description></method>
<method name="connected"><type>signal void</type><description><para>This signal is emitted when the socket successfully connects to the host and port given to the <computeroutput>connect</computeroutput> function. </para></description></method>
</method-group>
<constructor specifiers="explicit"><parameter name="parent"><paramtype>object *</paramtype><default>0</default><description><para>Makes this instance the child of <computeroutput>parent</computeroutput> </para></description></parameter><description><para>
</para></description></constructor>
<constructor specifiers="explicit"><parameter name="p"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><description><para>Constructor for internal extensions of this class. </para></description></constructor>
</class></namespace>
</namespace>
</namespace>
</namespace>
<typedef name="BTcpClient"><type><classname>boost::object::network::tcp::client</classname></type></typedef>
</header>
<header name="boost/object/network/tcpserver.hpp">
<namespace name="boost">
<namespace name="object">
<namespace name="network">
<namespace name="tcp">
<class name="server"><description><para>The tcp server. </para></description><method-group name="protected member functions">
<method name="acceptedConnection" specifiers="virtual"><type>void</type><parameter name="sock"><paramtype><classname>tcp::socket</classname> *</paramtype><description><para>The newly accepted connection </para></description></parameter><description><para>This function is internally called when a new connection got accepted. It emits the signal <computeroutput>newConnection</computeroutput>, so overriding this function will stop that signal from being emitted.</para><para>
</para></description></method>
<method name="start"><type>auto_slot void</type><description><para>Starts the server, accepting new connections. </para></description></method>
<method name="stop"><type>auto_slot void</type><description><para>Stops the server, not accepting new connections. </para></description></method>
<method name="port"><type>auto_slot uint16_t</type><description><para>Returns the port this server listens on. </para></description></method>
<method name="reuseAddress"><type>auto_slot bool</type><description><para>Gets the current setting of the SO_REUSEADDR socket option. </para></description></method>
<method name="setReuseAddress"><type>auto_slot void</type><parameter name="value"><paramtype>bool</paramtype></parameter><description><para>Sets the SO_REUSEADDR socket option. </para></description></method>
<method name="newConnection"><type>signal void</type><parameter name="sock"><paramtype><classname>tcp::socket</classname> *</paramtype><description><para>The newly accepted connection </para></description></parameter><description><para>This signal is emitted when a new connection got accepted.</para><para>Note: If you override <computeroutput>acceptedConnection</computeroutput>, this signal is not emitted.</para><para>
</para></description></method>
</method-group>
<constructor specifiers="explicit"><parameter name="parent"><paramtype>object *</paramtype><default>0</default><description><para>Makes this instance the child of <computeroutput>parent</computeroutput> </para></description></parameter><description><para>
<emphasis>Port</emphasis> will be automatically assigned. You can use the <computeroutput>port()</computeroutput> member function to retrieve that port.</para><para><emphasis>IpVersion</emphasis> will default to IPv4. </para></description></constructor>
<constructor specifiers="explicit"><parameter name="port"><paramtype>uint16_t</paramtype><description><para>The port this server shall listen on. May be zero, in which case a port is automatically assigned. You can use the <computeroutput>port()</computeroutput> member function to retrieve that port. </para></description></parameter><parameter name="parent"><paramtype>object *</paramtype><default>0</default><description><para>Makes this instance the child of <computeroutput>parent</computeroutput> </para></description></parameter><description><para>
<emphasis>IpVersion</emphasis> will default to IPv4. </para></description></constructor>
<constructor specifiers="explicit"><parameter name="ipver"><paramtype>IpVersion</paramtype><description><para>The IP version ( IPv4/IPv6 ) </para></description></parameter><parameter name="port"><paramtype>uint16_t</paramtype><description><para>The port this server shall listen on. May be zero, in which case a port is automatically assigned. You can use the <computeroutput>port()</computeroutput> member function to retrieve that port. </para></description></parameter><parameter name="parent"><paramtype>object *</paramtype><default>0</default><description><para>Makes this instance the child of <computeroutput>parent</computeroutput> </para></description></parameter><description><para>
</para></description></constructor>
<constructor specifiers="explicit"><parameter name="p"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><description><para>Constructor for internal extensions of this class. </para></description></constructor>
</class></namespace>
</namespace>
</namespace>
</namespace>
<typedef name="BTcpServer"><type><classname>boost::object::network::tcp::server</classname></type></typedef>
</header>
<header name="boost/object/network/tcpsocket.hpp">
<namespace name="boost">
<namespace name="object">
<namespace name="network">
<namespace name="tcp">
<class name="socket"><description><para>The base socket connection class for TCP. </para></description><method-group name="protected member functions">
<method name="start"><type>auto_slot void</type><description><para>Starts reading the socket. Call this function after you connected all your signals.</para><para>This function has no effect if the socket is not connected. </para></description></method>
<method name="write"><type>auto_slot void</type><parameter name="data"><paramtype>const utils::bytearray &amp;</paramtype><description><para>The data to be written </para></description></parameter><description><para>Writes <computeroutput>data</computeroutput> to the socket.</para><para>This function has no effect if the socket is not connected.</para><para>Using this function will <computeroutput>start</computeroutput> reading on this socket, if its not reading yet.</para><para>
</para></description></method>
<method name="disconnect"><type>auto_slot void</type><description><para>Disconnects the socket connection.</para><para>This function has no effect if the socket is not connected. </para></description></method>
<method name="noDelay"><type>auto_slot bool</type><description><para>Gets the current setting of the TCP_NODELAY socket option. </para></description></method>
<method name="setNoDelay"><type>auto_slot void</type><parameter name="value"><paramtype>bool</paramtype><description><para>True to enable, false to disable TCP_NODELAY </para></description></parameter><description><para>Sets the TCP_NODELAY socket option.</para><para>
</para></description></method>
<method name="received"><type>signal void</type><parameter name="data"><paramtype>const utils::bytearray &amp;</paramtype><description><para>The data that was read. </para></description></parameter><description><para>This signal is emitted when new data has been read by the socket.</para><para>
</para></description></method>
<method name="written"><type>signal void</type><parameter name="data"><paramtype>const utils::bytearray &amp;</paramtype><description><para>The data that was written. </para></description></parameter><description><para>This signal is emitted after <computeroutput>data</computeroutput> was written to the socket.</para><para>This data might not be the same as you gave to the <computeroutput>write</computeroutput> function. The data is internally merged with existing data that has not been sent yet.</para><para>
</para></description></method>
<method name="disconnected"><type>signal void</type><parameter name="ec"><paramtype>const boost::system::error_code &amp;</paramtype></parameter><description><para>This signal is emitted once when a socket is disconnected. </para></description></method>
</method-group>
<constructor specifiers="explicit"><parameter name="p"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><description><para>Constructor for internal extensions of this class. </para></description></constructor>
</class></namespace>
</namespace>
</namespace>
</namespace>
<typedef name="BTcpSocket"><type><classname>boost::object::network::tcp::socket</classname></type></typedef>
</header>
</library-reference>
